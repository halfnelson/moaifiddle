<style>
#fileViewerWindow {
    position: absolute;
    top: 40px;
    left: 300px;
    right: 300px;
    bottom: 30px;
    background-color: #222;
    border: 1px solid #666;
    z-index:999;

}

    #fileViewer {
        left: 0;
        right: 0;
        position: absolute;
        top: 28px;
        bottom: 0;

        background-color: #2a2a2d;
        overflow: auto;
        color: #CCC;
        padding: 10px;
    }

    #fileViewerWindow .closeButton{
        position: absolute;
        right: 5px;
        top: 3px;
        color: #CCC;
        cursor: pointer;
    }

    #fileViewerWindow > h1 {
        font-family: sans-serif;
        padding: 5px;
        background-color: #111;
        font-size: 14px;
        margin: 0;
        color: #ccc;
        font-weight: normal;
        height: 18px;
    }

</style>

<div id="fileViewerWindow" style="display: {{display}}">
    {{#file}}
    <h1>{{file.filename}}</h1>
    <span on-click="close" class="closeButton"><i class="fa fa-times">&nbsp;</i></span>
    <div id="fileViewer">
        {{# isType('text')}}
           <h1>text</h1>
            {{asString}}
        {{/end text}}

        {{# isType('image')}}
           <h1>image</h1>
        {{/end image}}

        {{# isType('audio')}}
            <h1>audio</h1>
        {{/end audio}}

        {{# isType('font')}}
            <h1>font</h1>
            {{filedata}}
        {{/end font}}

        {{# isType('unknown')}}
            <h3>Unknown Format</h3>
            Size: {{ file.data.length }} Bytes

        {{/end unknown}}


    </div>
    {{/file}}
</div>



<script>
    var typemap = {
        'ttf': 'font',
        'bmp': 'image',
        'png': 'image',
        'jpg': 'image',
        'jpeg': 'image',
        'ogg': 'audio',
        'wav': 'audio',
        'mp3': 'audio',
        'lua': 'text',
        'json': 'text',
        'xml': 'text',
        'conf': 'text',
        'cfg': 'text',
        'txt': 'text'
    };


    function arrayToString(arr) {
            console.log("convert to str ",arr);
        console.log((String.fromCharCode).apply(arr));
            return (String.fromCharCode).apply(arr);

    }

    component.exports = {

        data: {
            visible: false,
            file: {},
            isType: function(type) {
                return this.get('type') == type
            }
        },
        computed: {
            display: function() {
                return this.get('visible') ? "block" : "none";
            },
            type: function() {
                var filename = this.get('file.filename');
                var parts = filename.split('.');
                var ext = _(parts).last().toLowerCase();
                return typemap[ext] || 'unknown';
            },
            size: function() {
                return this.get('file.data').length;
            },
            asString: function() {
                return arrayToString(this.get("file.data"));
            }



        },

        init:function() {
            this.on('close',function(){
                this.set('visible', false);
                this.set('file',null);
              //  this.fire('close');
            })
        },

        showFile: function(file) {
            this.set('visible',true);
            this.set('file',file);
        }

    }
</script>
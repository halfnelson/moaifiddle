<style>
#fileViewerWindow {
    position: absolute;
    top: 40px;
    left: 300px;
    right: 300px;
    bottom: 30px;
    background-color: #222;
    border: 1px solid #666;
    z-index:999;

}

    #fileViewer {
        left: 0;
        right: 0;
        position: absolute;
        top: 28px;
        bottom: 0;

        background-color: #2a2a2d;
        overflow: auto;
        color: #CCC;
        padding: 10px;
    }

    #fileViewerWindow .closeButton{
        position: absolute;
        right: 5px;
        top: 3px;
        color: #CCC;
        cursor: pointer;
    }

    #fileViewerWindow > h1 {
        font-family: sans-serif;
        padding: 5px;
        background-color: #111;
        font-size: 14px;
        margin: 0;
        color: #ccc;
        font-weight: normal;
        height: 18px;
    }

    .trans {
        background-image: url('/images/transback.svg');
        display: inline-block;
        line-height: 0;

    }
</style>

<div id="fileViewerWindow" style="display: {{display}}">
    {{#file}}
    <h1>{{file.filename}}</h1>
    <span on-click="close" class="closeButton"><i class="fa fa-times">&nbsp;</i></span>
    <div id="fileViewer">
        {{# isType('text')}}
            <pre><code>
            {{asString}}
                </code>
            </pre>
        {{/end text}}
        {{# isType('lua') }}
        <pre><code>{{{highlighted}}}</code></pre>
        {{/end lua}}

        {{# isType('image')}}
           <div class="trans"><img src="{{asObjectUrl}}" style="width: 100%; height: 100%" /></div>
        {{/end image}}

        {{# isType('audio')}}
            <div style="font-family: monospace">
            <span>File Type: Audio</span><br>
            <span>File Size: {{file.data.length}} bytes</span><br>
                </div>
            <br>

            <audio controls src="{{asObjectUrl}}" style="width:100%"></audio>
        {{/end audio}}

        {{# isType('font')}}
            {{# ([8,10,12,14,16,18,20,22,26,30,35,40]) }}

                <span style="font-family: monospace;">at {{this}} px:</span><br>
            <span style="font-family: 'DemoFont'; font-size: {{this}}px; ">
                The quick red fox jumped over the lazy brown dog
            </span>
            <br>

            {{/end loop}}
        {{/end font}}

        {{# isType('unknown')}}
            <h3>Unknown Format</h3>
            Size: {{ file.data.length }} Bytes

        {{/end unknown}}


    </div>
    {{/file}}
</div>



<script>
    var typemap = {
        'ttf': {type: 'font', mime: 'application/font-sfnt'},
        'bmp': {type: 'image', mime: 'image/bmp'},
        'png': {type: 'image', mime: 'image/png'},
        'jpg': {type: 'image', mime: 'image/jpeg'},
        'jpeg': {type: 'image', mime: 'image/jpeg'},
        'ogg': {type: 'audio', mime: 'audio/ogg'},
        'wav': {type: 'audio', mime: 'audio/vnd.wave'},
        'mp3': {type: 'audio', mime: 'audio/mpeg'},
        'lua': {type: 'lua', mime: 'text/plain' },
        'json': {type: 'text', mime: 'text/plain' },
        'xml': {type: 'text', mime: 'text/plain' },
        'conf': {type: 'text', mime: 'text/plain' },
        'cfg': {type: 'text', mime: 'text/plain' },
        'txt': {type: 'text', mime: 'text/plain' }
    };


    function arrayToString(arr) {
            console.log("convert to str ",arr);
        console.log((String.fromCharCode).apply(null,new Uint16Array(arr)));
            return (String.fromCharCode).apply(null,new Uint16Array(arr));

    }

    component.exports = {

        data: {
            visible: false,
            file: {},
            isType: function(type) {
                return this.get('type') == type
            }
        },
        computed: {
            display: function() {
                return this.get('visible') ? "block" : "none";
            },
            extension: function() {
                var filename = this.get('file.filename');
                var parts = filename.split('.');
                return _(parts).last().toLowerCase();
            },
            type: function() {
                var ext = this.get('extension');
                var typeinfo = typemap[ext];
                if (!typeinfo) return 'unknown';
                return typeinfo.type;
            },
            mimetype: function() {
                var ext = this.get('extension');
                var typeinfo = typemap[ext];
                if (!typeinfo) return 'application/octet-stream';
                return typeinfo.mime;
            },
            size: function() {
                return this.get('file.data').length;
            },
            highlighted: function() {
                var str = this.get('asString');
                return hljs.highlight('lua',str).value;
            },
            asString: function() {
                return arrayToString(this.get("file.data"));
            },
            asObjectUrl: function() {
                var arr = this.get("file.data");
                var mime = this.get('mimetype');
                var blob = new Blob([arr], {type: mime});
                if (this.currentBlobURL) {
                    URL.revokeObjectURL(this.currentBlobURL);
                    this.currentBlobURL = null;
                }
                return this.currentBlobURL = URL.createObjectURL(blob);
            }



        },

        init:function() {
            this.on('close',function(){
                this.set('visible', false);
                this.set('file',null);
              //  this.fire('close');
            })
        },

        showFile: function(file) {
            this.set('visible',true);
            this.set('file',file);

            if (this.get('type') == 'font') {
                //remove our old one
                var oldstyle = document.getElementById('demofontstyle');
                if (oldstyle) {
                    oldstyle.parentNode.removeChild(oldstyle);
                }

                //add our style
                var stylefrag = " @font-face { font-family: 'DemoFont';  src: url('"+this.get('asObjectUrl')+"') format('truetype');" +
                                " font-weight: normal; font-style: normal;";


                var styletag = $( "<style id='demofontstyle'> "+ stylefrag + "</style>");

                $('head').prepend(styletag);
            }
        }
    }
</script>
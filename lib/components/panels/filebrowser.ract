<style>
    #fileBrowser {
        position: absolute;
        left: 4px;
        color: #ccc;
        top: 55px;
        bottom: 4px;
        background-color: #2a2a2d;
        border: 1px solid #666;
        width: 194px;
        box-sizing:border-box;
        -moz-box-sizing: border-box;
    }

    #fileBrowser .dir i.fa:before {
        content: "\f0dd";
    }

    #fileBrowser ul {
        list-style: none;
        padding:0;
        margin-left: 10px;
        margin-top:0px;
        font-size:14px;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;
    }

    #fileBrowser ul li {
        padding-top: 2px;
        padding-bottom: 2px;
    }
    #fileBrowser .dir.closed i.fa:before {
        content: "\f0da";
    }


    #fileBrowser .window-title {
        font-family: sans-serif;
        padding: 5px;
        background-color: #111;
        font-size: 14px;
    }
</style>


<div id="fileBrowser">
    <div class="window-title">Filesystem /</div>
    <ul>
        {{# fileList( files ) }}
        <li style="padding-left: {{depth * 5}}px; display:{{ visible(parent) ? "list-item":"none" }}; "
        class="{{dir ? "dir" :"file"}} {{closed(fullPath(this)) ? "closed": ""}}"
        data-path="{{fullPath(this)}}"
        ><i class="fa"></i> {{name}}</li>
        {{/ end file list}}
    </ul>
</div>



<script language="javascript">

    component.exports = {
        data: {
            isClosed: [],
            files: [
                {
                    name: 'loading...'
                }
            ],

            fullPath: function (fileInfo) {
                return fileInfo.parent + (fileInfo.parent == '/' ? '' : '/') + fileInfo.name;
            },
            closed: function (path) {
                var exp = this.get('isClosed');
                return exp.indexOf(path) >= 0;
            },
            visible: function (parentPath) {
                if (parentPath == "/") return true;
                var parent = parentPath.split("/");
                parent.pop();
                parent = parent.join("/") || "/";
                return (!this.data.closed.bind(this)(parentPath)) && this.data.visible.bind(this)(parent);
            },
            fileList: function (files) {
                var fs = [];
                files = files.map(function (f) {
                    var parts = f.name.split("/").slice(1);
                    f.parts = parts;
                    f.path = parts.slice(0, -1);
                    f.filename = parts.slice().pop();
                    return f;
                });
                files = files.sort(function (a, b) {
                    var adirs = a.path;
                    var bdirs = b.path;
                    var times = Math.min(a.path.length, b.path.length);
                    for (var i = 0; i < times; i++) {
                        if (a.path[i] != b.path[i]) {
                            return a.path[i] < b.path[i] ? -1 : 1;
                        }
                    }
                    if (adirs.length == bdirs.length) {
                        return a.filename < b.filename ? -1 : 1;
                    } else {
                        return adirs.length < bdirs.length ? 1 : -1;
                    }
                });
                var lastpath = ["zzzzzzzzzzzzdfasdfasdfzxfsadfasdfasdfasdf"];
                for (var i = 0; i < files.length; i++) {
                    var f = files[i];
                    var times = Math.min(lastpath.length, f.path.length);
                    var currentpath = "/";
                    var pushrest = false;
                    for (var j = 0; j < times; j++) {

                        if (f.path[j] != lastpath[j]) {
                            var start = j;
                            for (var k = start; k < f.path.length; k++) {
                                fs.push({idx: i, name: f.path[k], depth: k, dir: true, parent: currentpath});
                                currentpath = currentpath + (currentpath == '/' ? '' : '/') + f.path[k];
                            }
                            break;
                        }
                        currentpath = currentpath + (currentpath == '/' ? '' : '/') + f.path[j];
                    }
                    fs.push({idx: i, name: f.filename, depth: f.path.length, dir: false, parent: currentpath})

                    lastpath = f.path;

                }
                return fs;
            }
        },
        loadFilesFromJSON: function(filejson) {
            $.getJSON(filejson, function (filePackage) {
                var files = _(filePackage.files).map(function (f) {
                    return {name: f.filename}
                });
                var closed = _(filePackage.directories).map(function (f) {
                    return "/" + f
                });
                this.set('files', files);
                this.set('isClosed', closed);
            }.bind(this));
        },
        complete: function () {
            $("#fileBrowser").on("click", "ul li.dir", function (event) {
                this.fire("toggle", event);
            }.bind(this))
        },
        init: function () {

            this.on("open", function () {
                console.log("open")
            });

            this.on("toggle", function (event) {

                var target = $(event.target);
                if (!target.hasClass("dir")) {
                    target = $(event.target).parents("li.dir").first();
                }
                if (!target) return;
                var path = target.attr("data-path");


                var idx = this.get('isClosed').indexOf(path);

                if (idx >= 0) {
                    this.get('isClosed').splice(idx, 1);
                } else {
                    this.get('isClosed').push(path);
                }
            });
        }
    };


</script>